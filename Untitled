public class Node {
    public HashMap<Character, Node> children;
    public char letter;
    boolean isComplete;

    public Node(char letter) {

    }
}

public class PrefixTree {
    public Node root;

    public void insert(String s) {
        Node current = root;

        for(int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if(current.children.containsKey(c))
                current = current.children.get(c);
            else {
                Node newNode = new Node(c);
                current.children.put(c, newNode);
                current = newNode;
                if(i == s.length - 1) newNode.isComplete = true;
            }
        }
    }

    public Node lookup(Node n, char c) {
        if(n.children.containsKey(c)) return n.children.get(c);
        else return null;
    }
}

public class Graph {
    public char[][] letters;
    public PrefixTree tree;
    public StringBuilder sb = new StringBuilder();

    public dfs(int row, int col, int dx, int dy) {
        sb.setLength(0); // clear the sb.
        int currentRow = row;
        int currentCol = col;
        char currentChar = letters[row][col];
        Node cursor = tree.lookup(tree.root, currentChar);

        while(cursor != null) {
            sb.append(currentChar);

            if(cursor.isComplete) {
                System.out.println("Word found, word: " + sb.toString());
            }
            currentRow += dx;
            currentCol += dy;
            currentChar = letters[currentRow][currentCol];
            cursor = tree.lookup(cursor, currentChar);
        }

    }
}
